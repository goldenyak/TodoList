{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Downloads/new-todolist/my-app/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  let [tasks, setTasks] = useState([{\n    id: v1(),\n    title: \"HTML&CSS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"JS\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"ReactJS\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"Rest API\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"GraphQL\",\n    isDone: false\n  }]);\n  let [filter, setFilter] = useState(\"all\");\n\n  function removeTask(id) {\n    let filteredTasks = tasks.filter(t => t.id != id);\n    setTasks(filteredTasks);\n  }\n\n  function addTask(title) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    };\n    let newTasks = [task, ...tasks];\n    setTasks(newTasks);\n  }\n\n  function changeStatus(taskId, isDone) {\n    let task = tasks.find(t => t.id === taskId);\n\n    if (task) {\n      task.isDone = isDone;\n    }\n\n    setTasks([...tasks]);\n  }\n\n  let tasksForTodolist = tasks;\n\n  if (filter === \"active\") {\n    tasksForTodolist = tasks.filter(t => t.isDone === false);\n  }\n\n  if (filter === \"completed\") {\n    tasksForTodolist = tasks.filter(t => t.isDone === true);\n  }\n\n  function changeFilter(value) {\n    setFilter(value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Todolist, {\n      title: \"What to learn\",\n      tasks: tasksForTodolist,\n      removeTask: removeTask,\n      changeFilter: changeFilter,\n      addTask: addTask,\n      changeTaskStatus: changeStatus,\n      filter: filter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"51+0vXRZFZzyjfBXyG+HXEi9Pwk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/admin/Downloads/new-todolist/my-app/src/App.tsx"],"names":["React","useState","Todolist","v1","App","tasks","setTasks","id","title","isDone","filter","setFilter","removeTask","filteredTasks","t","addTask","task","newTasks","changeStatus","taskId","find","tasksForTodolist","changeFilter","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {Todolist} from './Todolist';\nimport {v1} from 'uuid';\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\n\nfunction App() {\n\n  let [tasks, setTasks] = useState([\n    {id: v1(), title: \"HTML&CSS\", isDone: true},\n    {id: v1(), title: \"JS\", isDone: true},\n    {id: v1(), title: \"ReactJS\", isDone: false},\n    {id: v1(), title: \"Rest API\", isDone: false},\n    {id: v1(), title: \"GraphQL\", isDone: false},\n  ]);\n  let [filter, setFilter] = useState<FilterValuesType>(\"all\");\n\n\n  function removeTask(id: string) {\n    let filteredTasks = tasks.filter(t => t.id != id);\n    setTasks(filteredTasks);\n  }\n\n  function addTask(title: string) {\n    let task = {id: v1(), title: title, isDone: false};\n    let newTasks = [task, ...tasks];\n    setTasks(newTasks);\n  }\n\n  function changeStatus(taskId: string, isDone: boolean) {\n    let task = tasks.find(t => t.id === taskId);\n    if (task) {\n      task.isDone = isDone;\n    }\n\n    setTasks([...tasks]);\n  }\n\n\n  let tasksForTodolist = tasks;\n\n  if (filter === \"active\") {\n    tasksForTodolist = tasks.filter(t => t.isDone === false);\n  }\n  if (filter === \"completed\") {\n    tasksForTodolist = tasks.filter(t => t.isDone === true);\n  }\n\n  function changeFilter(value: FilterValuesType) {\n    setFilter(value);\n  }\n\n\n  return (\n      <div className=\"App\">\n        <Todolist title=\"What to learn\"\n                  tasks={tasksForTodolist}\n                  removeTask={removeTask}\n                  changeFilter={changeFilter}\n                  addTask={addTask}\n                  changeTaskStatus={changeStatus}\n                  filter={filter}\n        />\n      </div>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}