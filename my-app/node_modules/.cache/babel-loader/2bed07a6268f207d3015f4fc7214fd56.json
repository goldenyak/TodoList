{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Downloads/new-todolist/my-app/src/ToDolist.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from \"./Button\";\nimport { EditableInput } from \"./components/EditableInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ToDolist(props) {\n  _s();\n\n  const [title, setTitle] = useState('');\n  const [error, setError] = useState(false); // Методом .мар перебираем массив и засовываем каждый элемент в разметку\n\n  const tasksJSXElements = props.tasks.map(elem => {\n    const removeTask = () => props.removeTask(props.todoListId, elem.id);\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: elem.isDone,\n        onChange: event => props.changeTaskStatus(props.todoListId, elem.id, event.currentTarget.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditableInput, {\n        title: elem.title,\n        onChange: props.changeSetEditMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: removeTask,\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, elem.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  });\n\n  function addTask() {\n    const trimmedTitle = title.trim();\n\n    if (trimmedTitle) {\n      props.addTask(props.todoListId, trimmedTitle);\n    } else {\n      setError(true);\n    }\n\n    setTitle('');\n  }\n\n  function onAllClickHandler() {\n    props.changeFilter(props.todoListId, 'all');\n  }\n\n  function onActiveClickHandler() {\n    props.changeFilter(props.todoListId, 'active');\n  }\n\n  function onCompletedClickHandler() {\n    props.changeFilter(props.todoListId, 'completed');\n  }\n\n  function onTitleChangeHandler(event) {\n    setTitle(event.currentTarget.value);\n    setError(false);\n  }\n\n  function onTitleKeyPressHandler(event) {\n    if (event.key === 'Enter') addTask();\n  }\n\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'error-message',\n    children: \" Title is required\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 34\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [props.title, /*#__PURE__*/_jsxDEV(Button, {\n        removeTodolist: props.removeTodolist,\n        todoListId: props.todoListId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: error ? 'error' : '',\n        value: title,\n        onChange: onTitleChangeHandler,\n        onKeyPress: onTitleKeyPressHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTask,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), errorMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasksJSXElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: props.filter === 'all' ? 'active-filter' : '',\n        onClick: onAllClickHandler,\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: props.filter === 'active' ? 'active-filter' : '',\n        onClick: onActiveClickHandler,\n        children: \"Active\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: props.filter === 'completed' ? 'active-filter' : '',\n        onClick: onCompletedClickHandler,\n        children: \"Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToDolist, \"9j2mlgnVyApk4L8v17fOnVArBvE=\");\n\n_c = ToDolist;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDolist\");","map":{"version":3,"sources":["/Users/admin/Downloads/new-todolist/my-app/src/ToDolist.tsx"],"names":["React","useState","Button","EditableInput","ToDolist","props","title","setTitle","error","setError","tasksJSXElements","tasks","map","elem","removeTask","todoListId","id","isDone","event","changeTaskStatus","currentTarget","checked","changeSetEditMode","addTask","trimmedTitle","trim","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","onTitleChangeHandler","value","onTitleKeyPressHandler","key","errorMessage","removeTodolist","filter"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {Button} from \"./Button\";\r\nimport {AddNewTodolist} from \"./components/AddNewTodolist\";\r\nimport {EditableInput} from \"./components/EditableInput\";\r\n\r\nexport type ToDoListPropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todoListId: string, taskId: string) => void\r\n    changeFilter: (todoListId: string, value: FilterValuesType) => void\r\n    todoListId: string\r\n    addTask: (todoListId: string, title: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (todoListId: string, taskID: string, isDone: boolean) => void\r\n    removeTodolist: (todoListId: string) => void\r\n    addNewTodolist: (title: string) => void\r\n    changeSetEditMode: () => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport function ToDolist (props: ToDoListPropsType) {\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    // Методом .мар перебираем массив и засовываем каждый элемент в разметку\r\n    const tasksJSXElements = props.tasks.map(elem => {\r\n        const removeTask = () => props.removeTask(props.todoListId, elem.id);\r\n        return (\r\n            <li key={elem.id}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={elem.isDone}\r\n                    onChange={(event) => props.changeTaskStatus(props.todoListId, elem.id, event.currentTarget.checked)}\r\n                />\r\n                <EditableInput title={elem.title} onChange={props.changeSetEditMode}  />\r\n                {/*<span>{elem.title}</span>*/}\r\n                <button onClick={removeTask}>x</button>\r\n            </li>)\r\n    })\r\n\r\n    function addTask() {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addTask(props.todoListId, trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n\r\n    function onAllClickHandler() {props.changeFilter(props.todoListId, 'all')}\r\n    function onActiveClickHandler() {props.changeFilter(props.todoListId, 'active')}\r\n    function onCompletedClickHandler() {props.changeFilter(props.todoListId, 'completed')}\r\n    function onTitleChangeHandler(event: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(event.currentTarget.value)\r\n        setError(false)\r\n    }\r\n    function onTitleKeyPressHandler(event: KeyboardEvent<HTMLInputElement>)  {\r\n        if (event.key === 'Enter') addTask()\r\n    }\r\n\r\n    const errorMessage = error ? <div className={'error-message'}> Title is required</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}\r\n                <Button removeTodolist={props.removeTodolist} todoListId={props.todoListId}/>\r\n            </h3>\r\n            <div>\r\n                <input\r\n                    className={error ? 'error' : ''}\r\n                    value={title}\r\n                    onChange={onTitleChangeHandler}\r\n                    onKeyPress={onTitleKeyPressHandler}\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n                {errorMessage}\r\n            </div>\r\n            <ul>\r\n                {/*Засунули елемент в разметку, который перебирали методом .мар*/}\r\n                {tasksJSXElements}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={props.filter === 'all' ? 'active-filter' : ''}\r\n                    onClick={onAllClickHandler}>All\r\n                </button>\r\n                <button\r\n                    className={props.filter === 'active' ? 'active-filter' : ''}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </button>\r\n                <button\r\n                    className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}