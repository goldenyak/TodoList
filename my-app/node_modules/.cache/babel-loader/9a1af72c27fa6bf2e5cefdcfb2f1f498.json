{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Downloads/new-todolist/my-app/src/components/EditableInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function EditableInput(props) {\n  _s();\n\n  let [title, setTitle] = useState(props.title);\n  let [editMode, setEditMode] = useState(true);\n\n  function changeSetEditMode(e) {\n    setTitle(e.currentTarget.value);\n    console.log(title);\n  }\n\n  return editMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n    autoFocus: true,\n    value: title,\n    onChange: changeSetEditMode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 15\n  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n    children: props.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 15\n  }, this);\n}\n\n_s(EditableInput, \"Ev8Sw/d9Lt8BvXHjcTF9wTV8Lp0=\");\n\n_c = EditableInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableInput\");","map":{"version":3,"sources":["/Users/admin/Downloads/new-todolist/my-app/src/components/EditableInput.tsx"],"names":["React","useState","EditableInput","props","title","setTitle","editMode","setEditMode","changeSetEditMode","e","currentTarget","value","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAA4BC,QAA5B,QAA2C,OAA3C;;AAOA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAAiD;AAAA;;AACpD,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAACE,KAAK,CAACC,KAAP,CAAhC;AACA,MAAI,CAACE,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,IAAD,CAAtC;;AAEA,WAASO,iBAAT,CAA2BC,CAA3B,EAA6D;AACzDJ,IAAAA,QAAQ,CAACI,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAR;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACH;;AAGD,SACIE,QAAQ,gBACF;AAAO,IAAA,SAAS,MAAhB;AACO,IAAA,KAAK,EAAEF,KADd;AAEO,IAAA,QAAQ,EAAEI;AAFjB;AAAA;AAAA;AAAA;AAAA,UADE,gBAIF;AAAA,cAAOL,KAAK,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,UALV;AAOH;;GAjBeF,a;;KAAAA,a","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\n\ntype EditableInputType = {\n    title: string\n    // onChange: (e:ChangeEvent<HTMLInputElement> ) => void\n}\n\nexport function EditableInput(props: EditableInputType) {\n    let [title, setTitle] = useState(props.title)\n    let [editMode, setEditMode] = useState(true)\n\n    function changeSetEditMode(e: ChangeEvent<HTMLInputElement>) {\n        setTitle(e.currentTarget.value)\n        console.log(title)\n    }\n\n\n    return (\n        editMode\n            ? <input autoFocus\n                     value={title}\n                     onChange={changeSetEditMode}/>\n            : <span>{props.title}</span>\n    )\n}"]},"metadata":{},"sourceType":"module"}