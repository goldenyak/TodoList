{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Downloads/new-todolist/my-app/src/ToDolist.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button } from \"./Button\";\nimport { EditableInput } from \"./components/EditableInput\";\nimport { TextField } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ToDolist(props) {\n  _s();\n\n  const [title, setTitle] = useState('');\n  const [error, setError] = useState(false); // Методом .мар перебираем массив и засовываем каждый элемент в разметку\n\n  const tasksJSXElements = props.tasks.map(elem => {\n    const removeTask = () => props.removeTask(props.todoListId, elem.id);\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: elem.isDone,\n        onChange: event => props.changeTaskStatus(props.todoListId, elem.id, event.currentTarget.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditableInput, {\n        title: elem.title,\n        updateTaskTitle: props.updateTaskTitle,\n        todoListId: props.todoListId,\n        id: elem.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: removeTask,\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, elem.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  });\n\n  function addTask() {\n    const trimmedTitle = title.trim();\n\n    if (trimmedTitle) {\n      props.addTask(props.todoListId, trimmedTitle);\n    } else {\n      setError(true);\n    }\n\n    setTitle('');\n  }\n\n  function onAllClickHandler() {\n    props.changeFilter(props.todoListId, 'all');\n  }\n\n  function onActiveClickHandler() {\n    props.changeFilter(props.todoListId, 'active');\n  }\n\n  function onCompletedClickHandler() {\n    props.changeFilter(props.todoListId, 'completed');\n  }\n\n  function onTitleChangeHandler(event) {\n    setTitle(event.currentTarget.value);\n    setError(false);\n  }\n\n  function onTitleKeyPressHandler(event) {\n    if (event.key === 'Enter') addTask();\n  }\n\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'error-message',\n    children: \" Title is required\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 34\n  }, this) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [/*#__PURE__*/_jsxDEV(EditableInput, {\n        title: props.title,\n        updateTaskTitle: props.updateTodolist,\n        todoListId: props.todoListId,\n        id: 'заглушка'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        removeTodolist: props.removeTodolist,\n        todoListId: props.todoListId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Enter task name\",\n        id: \"outlined-size-small\",\n        defaultValue: \"Small\",\n        variant: \"outlined\",\n        size: \"small\",\n        className: error ? 'error' : '',\n        value: title,\n        onChange: onTitleChangeHandler,\n        onKeyPress: onTitleKeyPressHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: addTask,\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), errorMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasksJSXElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: props.filter === 'all' ? 'active-filter' : '',\n        onClick: onAllClickHandler,\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: props.filter === 'active' ? 'active-filter' : '',\n        onClick: onActiveClickHandler,\n        children: \"Active\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: props.filter === 'completed' ? 'active-filter' : '',\n        onClick: onCompletedClickHandler,\n        children: \"Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToDolist, \"9j2mlgnVyApk4L8v17fOnVArBvE=\");\n\n_c = ToDolist;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDolist\");","map":{"version":3,"sources":["/Users/admin/Downloads/new-todolist/my-app/src/ToDolist.tsx"],"names":["React","useState","Button","EditableInput","TextField","ToDolist","props","title","setTitle","error","setError","tasksJSXElements","tasks","map","elem","removeTask","todoListId","id","isDone","event","changeTaskStatus","currentTarget","checked","updateTaskTitle","addTask","trimmedTitle","trim","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","onTitleChangeHandler","value","onTitleKeyPressHandler","key","errorMessage","updateTodolist","removeTodolist","filter"],"mappings":"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","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {Button} from \"./Button\";\r\nimport {AddNewTodolist} from \"./components/AddNewTodolist\";\r\nimport {EditableInput} from \"./components/EditableInput\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type ToDoListPropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todoListId: string, taskId: string) => void\r\n    changeFilter: (todoListId: string, value: FilterValuesType) => void\r\n    todoListId: string\r\n    addTask: (todoListId: string, title: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (todoListId: string, taskID: string, isDone: boolean) => void\r\n    removeTodolist: (todoListId: string) => void\r\n    addNewTodolist: (title: string) => void\r\n    updateTaskTitle: (todoListId: string, id: string, title: string) => void\r\n    updateTodolist: (todoListId: string, id: string, title: string) => void\r\n\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport function ToDolist(props: ToDoListPropsType) {\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    // Методом .мар перебираем массив и засовываем каждый элемент в разметку\r\n    const tasksJSXElements = props.tasks.map(elem => {\r\n        const removeTask = () => props.removeTask(props.todoListId, elem.id);\r\n        return (\r\n            <li key={elem.id}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={elem.isDone}\r\n                    onChange={(event) => props.changeTaskStatus(props.todoListId, elem.id, event.currentTarget.checked)}\r\n                />\r\n                <EditableInput title={elem.title} updateTaskTitle={props.updateTaskTitle} todoListId={props.todoListId}\r\n                               id={elem.id}/>\r\n                {/*<span>{elem.title}</span>*/}\r\n                <button onClick={removeTask}>x</button>\r\n            </li>)\r\n    })\r\n\r\n    function addTask() {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addTask(props.todoListId, trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n    function onAllClickHandler() {\r\n        props.changeFilter(props.todoListId, 'all')\r\n    }\r\n\r\n    function onActiveClickHandler() {\r\n        props.changeFilter(props.todoListId, 'active')\r\n    }\r\n\r\n    function onCompletedClickHandler() {\r\n        props.changeFilter(props.todoListId, 'completed')\r\n    }\r\n\r\n    function onTitleChangeHandler(event: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(event.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    function onTitleKeyPressHandler(event: KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') addTask()\r\n    }\r\n\r\n    const errorMessage = error ? <div className={'error-message'}> Title is required</div> : null\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableInput title={props.title} updateTaskTitle={props.updateTodolist} todoListId={props.todoListId}\r\n                               id={'заглушка'}/>\r\n                {/*{props.title}*/}\r\n                <Button removeTodolist={props.removeTodolist} todoListId={props.todoListId}/>\r\n            </h3>\r\n            <div>\r\n                {/*<input*/}\r\n                {/*    className={error ? 'error' : ''}*/}\r\n                {/*    value={title}*/}\r\n                {/*    onChange={onTitleChangeHandler}*/}\r\n                {/*    onKeyPress={onTitleKeyPressHandler}*/}\r\n                {/*/>*/}\r\n                <TextField label=\"Enter task name\"\r\n                           id=\"outlined-size-small\"\r\n                           defaultValue=\"Small\"\r\n                           variant=\"outlined\"\r\n                           size=\"small\"\r\n                           className={error ? 'error' : ''}\r\n                           value={title}\r\n                           onChange={onTitleChangeHandler}\r\n\r\n                           onKeyPress={onTitleKeyPressHandler}\r\n                />\r\n                {/*<button onClick={addTask}>+</button>*/}\r\n                <Button variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={addTask}>\r\n                    +\r\n                </Button>\r\n                {errorMessage}\r\n            </div>\r\n            <ul>\r\n                {/*Засунули елемент в разметку, который перебирали методом .мар*/}\r\n                {tasksJSXElements}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={props.filter === 'all' ? 'active-filter' : ''}\r\n                    onClick={onAllClickHandler}>All\r\n                </button>\r\n                <button\r\n                    className={props.filter === 'active' ? 'active-filter' : ''}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </button>\r\n                <button\r\n                    className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}