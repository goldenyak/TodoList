[{"/Users/admin/Downloads/new-todolist/my-app/src/index.tsx":"1","/Users/admin/Downloads/new-todolist/my-app/src/App.tsx":"2","/Users/admin/Downloads/new-todolist/my-app/src/serviceWorker.ts":"3","/Users/admin/Downloads/new-todolist/my-app/src/Todolist.tsx":"4","/Users/admin/Downloads/new-todolist/my-app/src/ToDolist.tsx":"5","/Users/admin/Downloads/new-todolist/my-app/src/components/AddNewTodolist.tsx":"6","/Users/admin/Downloads/new-todolist/my-app/src/components/EditableInput.tsx":"7","/Users/admin/Downloads/new-todolist/my-app/src/ButtonRemoveTodolist.tsx":"8"},{"size":465,"mtime":1588787636000,"results":"9","hashOfConfig":"10"},{"size":5032,"mtime":1628537811904,"results":"11","hashOfConfig":"10"},{"size":5295,"mtime":1587586614000,"results":"12","hashOfConfig":"10"},{"size":3685,"mtime":1626882332456,"results":"13","hashOfConfig":"10"},{"size":5888,"mtime":1628098136424,"results":"14","hashOfConfig":"10"},{"size":1464,"mtime":1627855960450,"results":"15","hashOfConfig":"10"},{"size":961,"mtime":1628099736388,"results":"16","hashOfConfig":"10"},{"size":1021,"mtime":1628098173470,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1kkyg89",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/admin/Downloads/new-todolist/my-app/src/index.tsx",[],["40","41"],"/Users/admin/Downloads/new-todolist/my-app/src/App.tsx",["42","43"],"import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, ToDolist} from './ToDolist';\r\nimport {v1} from 'uuid';\r\nimport {AddNewTodolist} from \"./components/AddNewTodolist\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype todolistsType = { id: string, title: string, filter: FilterValuesType };\r\ntype taskGeneralType = { [key: string]: Array<TaskType> }\r\n\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<todolistsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Apple\", isDone: true},\r\n            {id: v1(), title: \"Beer\", isDone: false},\r\n            {id: v1(), title: \"Hleb\", isDone: false},\r\n            {id: v1(), title: \"Water\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    function removeTask(todoListId: string, id: string) {\r\n        let currentTask = tasks[todoListId];\r\n        console.log(currentTask)\r\n        if (currentTask) {\r\n            tasks[todoListId] = currentTask.filter(t => t.id != id)\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n    function removeTodolist(todoListId: string) {\r\n        let currentTodolist = todolists.filter( f => f.id !== todoListId)\r\n        setTodolists(currentTodolist)\r\n    }\r\n    function addTask(todoListId: string, title: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        tasks[todoListId] = [task, ...tasks[todoListId]]\r\n        setTasks({...tasks})\r\n    }\r\n    function changeStatus(todoListId: string, taskId: string, isDone: boolean) {\r\n        let currentStatus = tasks[todoListId];\r\n        let task = currentStatus.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n        }\r\n        setTasks({...tasks})\r\n    }\r\n    function changeFilter(todoListId: string, value: FilterValuesType) {\r\n        let currentTodoList = todolists.find(t => t.id === todoListId)\r\n        console.log(value)\r\n        if (currentTodoList) {\r\n            currentTodoList.filter = value\r\n        }\r\n        setTodolists([...todolists])\r\n    }\r\n    function addNewTodolist(title: string) {\r\n        let newTodolistID = v1()\r\n        let newTodolist: todolistsType = {id: newTodolistID, title: title, filter: 'all'}\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({...tasks, [newTodolistID]: []})\r\n    }\r\n    function updateTaskTitle(todoListId: string, id: string, title: string) {\r\n        let currentTask = tasks[todoListId]\r\n        if (currentTask) {\r\n            let editableTask = currentTask.find( f => f.id === id )\r\n            if (editableTask) {\r\n                editableTask.title = title\r\n            }\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    function updateTodolist(todoListId: string, id: string, title: string) {\r\n        let currentTodolist = todolists.find( f => f.id === todoListId)\r\n        if (currentTodolist ? currentTodolist.title = title : title)\r\n        setTodolists([...todolists])\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddNewTodolist addNewTodolist={addNewTodolist} />\r\n\r\n            {todolists.map((t) => {\r\n                    let tasksForTodolist = tasks[t.id];\r\n                    if (t.filter === \"active\") {\r\n                        tasksForTodolist = tasks[t.id].filter(t => t.isDone === false);\r\n                    }\r\n                    if (t.filter === \"completed\") {\r\n                        tasksForTodolist = tasks[t.id].filter(t => t.isDone === true);\r\n                    }\r\n                    // debugger\r\n                    return (\r\n                        <ToDolist\r\n                            key={t.id}\r\n                            todoListId={t.id}\r\n                            title={t.title}\r\n                            tasks={tasksForTodolist}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            filter={t.filter}\r\n                            removeTodolist={removeTodolist}\r\n                            addNewTodolist={addNewTodolist}\r\n                            updateTaskTitle={updateTaskTitle}\r\n                            updateTodolist={updateTodolist}\r\n\r\n                        />\r\n                    )\r\n                }\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","/Users/admin/Downloads/new-todolist/my-app/src/serviceWorker.ts",[],"/Users/admin/Downloads/new-todolist/my-app/src/Todolist.tsx",[],["44","45"],"/Users/admin/Downloads/new-todolist/my-app/src/ToDolist.tsx",["46","47","48","49","50","51","52","53","54"],"import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {ButtonRemoveTodolist} from \"./ButtonRemoveTodolist\";\r\nimport {AddNewTodolist} from \"./components/AddNewTodolist\";\r\nimport {EditableInput} from \"./components/EditableInput\";\r\nimport {Button, Checkbox, Fade, Grid, Icon, IconButton, Paper, Popper, TextField, Typography} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport classes from \"*.module.css\";\r\n\r\nexport type ToDoListPropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todoListId: string, taskId: string) => void\r\n    changeFilter: (todoListId: string, value: FilterValuesType) => void\r\n    todoListId: string\r\n    addTask: (todoListId: string, title: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskStatus: (todoListId: string, taskID: string, isDone: boolean) => void\r\n    removeTodolist: (todoListId: string) => void\r\n    addNewTodolist: (title: string) => void\r\n    updateTaskTitle: (todoListId: string, id: string, title: string) => void\r\n    updateTodolist: (todoListId: string, id: string, title: string) => void\r\n\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport function ToDolist(props: ToDoListPropsType) {\r\n\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    // Методом .мар перебираем массив и засовываем каждый элемент в разметку\r\n    const tasksJSXElements = props.tasks.map(elem => {\r\n        const removeTask = () => props.removeTask(props.todoListId, elem.id);\r\n        return (\r\n            <li key={elem.id}>\r\n                {/*<input*/}\r\n                {/*    type=\"checkbox\"*/}\r\n                {/*    checked={elem.isDone}*/}\r\n                {/*    onChange={(event) => props.changeTaskStatus(props.todoListId, elem.id, event.currentTarget.checked)}*/}\r\n                {/*/>*/}\r\n                <Checkbox\r\n                    checked={elem.isDone}\r\n                    onChange={(event) => props.changeTaskStatus(props.todoListId, elem.id, event.currentTarget.checked)}\r\n                    defaultChecked\r\n                    size={\"small\"}\r\n                    color=\"primary\"\r\n                    inputProps={{'aria-label': 'secondary checkbox'}}\r\n                />\r\n                <EditableInput title={elem.title} updateTaskTitle={props.updateTaskTitle} todoListId={props.todoListId}\r\n                               id={elem.id}/>\r\n                {/*<span>{elem.title}</span>*/}\r\n                <button onClick={removeTask}>x</button>\r\n            </li>)\r\n    })\r\n\r\n    function addTask() {\r\n        const trimmedTitle = title.trim()\r\n        if (trimmedTitle) {\r\n            props.addTask(props.todoListId, trimmedTitle)\r\n        } else {\r\n            setError(true)\r\n        }\r\n        setTitle('')\r\n    }\r\n\r\n    function onAllClickHandler() {\r\n        props.changeFilter(props.todoListId, 'all')\r\n    }\r\n\r\n    function onActiveClickHandler() {\r\n        props.changeFilter(props.todoListId, 'active')\r\n    }\r\n\r\n    function onCompletedClickHandler() {\r\n        props.changeFilter(props.todoListId, 'completed')\r\n    }\r\n\r\n    function onTitleChangeHandler(event: ChangeEvent<HTMLInputElement>) {\r\n        setTitle(event.currentTarget.value)\r\n        setError(false)\r\n    }\r\n\r\n    function onTitleKeyPressHandler(event: KeyboardEvent<HTMLInputElement>) {\r\n        if (event.key === 'Enter') addTask()\r\n    }\r\n\r\n    const errorMessage = error ? <div className={'error-message'}> Title is required</div> : null\r\n\r\n    return (\r\n        <Paper elevation={3} style={{padding: '10px'}}>\r\n            <h3>\r\n                <EditableInput title={props.title} updateTaskTitle={props.updateTodolist} todoListId={props.todoListId}\r\n                               id={'заглушка'}/>\r\n                <ButtonRemoveTodolist removeTodolist={props.removeTodolist} todoListId={props.todoListId}/>\r\n            </h3>\r\n            <Grid container\r\n                  direction=\"row\"\r\n                  justifyContent=\"space-between\"\r\n                  alignItems=\"center\">\r\n                <TextField label=\"Enter task name\"\r\n                           id=\"outlined-size-small\"\r\n                           defaultValue=\"Small\"\r\n                           variant=\"outlined\"\r\n                           size=\"small\"\r\n                           className={error ? 'error' : ''}\r\n                           value={title}\r\n                           onChange={onTitleChangeHandler}\r\n                           onKeyPress={onTitleKeyPressHandler}\r\n                />\r\n                <IconButton aria-label=\"delete\">\r\n                    <AddIcon\r\n                        onClick={addTask}>\r\n                    </AddIcon>\r\n                </IconButton>\r\n                {errorMessage}\r\n            </Grid>\r\n            <ul>\r\n                {/*Засунули елемент в разметку, который перебирали методом .мар*/}\r\n                {tasksJSXElements}\r\n            </ul>\r\n            <div>\r\n                <button\r\n                    className={props.filter === 'all' ? 'active-filter' : ''}\r\n                    onClick={onAllClickHandler}>All\r\n                </button>\r\n                <button\r\n                    className={props.filter === 'active' ? 'active-filter' : ''}\r\n                    onClick={onActiveClickHandler}>Active\r\n                </button>\r\n                <button\r\n                    className={props.filter === 'completed' ? 'active-filter' : ''}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n                </button>\r\n            </div>\r\n        </Paper>\r\n    )\r\n}","/Users/admin/Downloads/new-todolist/my-app/src/components/AddNewTodolist.tsx",["55"],"import {Button} from \"@material-ui/core\";\nimport React, {ChangeEvent, KeyboardEvent, MouseEventHandler, useState} from \"react\";\n\ntype AddNewTodolistType = {\n    addNewTodolist: (title: string) => void\n}\n\nexport function AddNewTodolist(props: AddNewTodolistType) {\n    const [title, setTitle] = useState<string>('')\n    const [error, setError] = useState<boolean>(false)\n\n    function onTitleChangeHandler(event: ChangeEvent<HTMLInputElement>) {\n        setTitle(event.currentTarget.value)\n        setError(false)\n    }\n\n    function onTitleKeyPressHandler(event: KeyboardEvent<HTMLInputElement>) {\n        if (event.key === 'Enter') addNewTodolist()\n    }\n\n    function addNewTodolist() {\n        if (title.trim() !== '') {\n            props.addNewTodolist(title)\n            setTitle('')\n        } else {\n            setError(true)\n        }\n    }\n\n    const errorMessage = error ? <div className={'error-message'}> Title is required</div> : null\n\n    return (\n        <div>\n            <input\n                className={error ? 'error' : ''}\n                value={title}\n                onChange={onTitleChangeHandler}\n                onKeyPress={onTitleKeyPressHandler}\n            />\n            {/*<button onClick={addNewTodolist}>+</button>*/}\n            <Button variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={addNewTodolist}>\n                +\n            </Button>\n            {errorMessage}\n        </div>\n    )\n}","/Users/admin/Downloads/new-todolist/my-app/src/components/EditableInput.tsx",["56"],"import React, {ChangeEvent, MouseEventHandler, useState} from \"react\";\n\ntype EditableInputType = {\n    title: string\n    updateTaskTitle: (todoListId: string, id: string, title: string) => void\n    todoListId: string\n    id: string\n}\n\nexport function EditableInput(props: EditableInputType) {\n    let [title, setTitle] = useState(props.title)\n    let [editMode, setEditMode] = useState(false)\n\n    function changeSetEditMode(e: ChangeEvent<HTMLInputElement>) {\n        setTitle(e.currentTarget.value)\n    }\n    function onEditMode() {\n        setEditMode(true)\n    }\n    function offEditMode() {\n        setEditMode(false)\n        props.updateTaskTitle(props.todoListId, props.id, title)\n    }\n\n    return (\n        editMode\n            ? <input autoFocus\n                     value={title}\n                     onChange={changeSetEditMode}\n                     onBlur={offEditMode}/>\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n}\n","/Users/admin/Downloads/new-todolist/my-app/src/ButtonRemoveTodolist.tsx",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":9,"column":6,"nodeType":"63","messageId":"64","endLine":9,"endColumn":21},{"ruleId":"65","severity":1,"message":"66","line":43,"column":62,"nodeType":"67","messageId":"68","endLine":43,"endColumn":64},{"ruleId":"57","replacedBy":"69"},{"ruleId":"59","replacedBy":"70"},{"ruleId":"61","severity":1,"message":"71","line":4,"column":9,"nodeType":"63","messageId":"64","endLine":4,"endColumn":23},{"ruleId":"61","severity":1,"message":"72","line":6,"column":9,"nodeType":"63","messageId":"64","endLine":6,"endColumn":15},{"ruleId":"61","severity":1,"message":"73","line":6,"column":27,"nodeType":"63","messageId":"64","endLine":6,"endColumn":31},{"ruleId":"61","severity":1,"message":"74","line":6,"column":39,"nodeType":"63","messageId":"64","endLine":6,"endColumn":43},{"ruleId":"61","severity":1,"message":"75","line":6,"column":64,"nodeType":"63","messageId":"64","endLine":6,"endColumn":70},{"ruleId":"61","severity":1,"message":"76","line":6,"column":83,"nodeType":"63","messageId":"64","endLine":6,"endColumn":93},{"ruleId":"61","severity":1,"message":"77","line":7,"column":9,"nodeType":"63","messageId":"64","endLine":7,"endColumn":15},{"ruleId":"61","severity":1,"message":"78","line":8,"column":8,"nodeType":"63","messageId":"64","endLine":8,"endColumn":16},{"ruleId":"61","severity":1,"message":"79","line":10,"column":8,"nodeType":"63","messageId":"64","endLine":10,"endColumn":15},{"ruleId":"61","severity":1,"message":"80","line":2,"column":44,"nodeType":"63","messageId":"64","endLine":2,"endColumn":61},{"ruleId":"61","severity":1,"message":"80","line":1,"column":29,"nodeType":"63","messageId":"64","endLine":1,"endColumn":46},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"@typescript-eslint/no-unused-vars","'taskGeneralType' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["81"],["82"],"'AddNewTodolist' is defined but never used.","'Button' is defined but never used.","'Fade' is defined but never used.","'Icon' is defined but never used.","'Popper' is defined but never used.","'Typography' is defined but never used.","'Delete' is defined but never used.","'SendIcon' is defined but never used.","'classes' is defined but never used.","'MouseEventHandler' is defined but never used.","no-global-assign","no-unsafe-negation"]